@page "/rotate-sorting-algorithm"
@using InterviewTest.Data
@using DefaultNamespace
@inject SortingAlgorithmService _sortingService
@inject IJSRuntime JsRuntime
<h5>Rotating Sorting algorithm</h5>

<MatCard  Class="mt-4" >
    <MatCardContent >
        <div class="d-flex justify-content-start">
            <MatTextField FullWidth="true" Type="text" Label="Sequence Rotation" PlaceHolder="Sequence Number" @bind-Value="CharString"> </MatTextField>
        </div>
    
        <div class="d-flex flex-row justify-content-between align-items-center gap-3 m-3" >
            <MatTextField Type="number" Label="Sequence Rotation" PlaceHolder="Sequence Number" @bind-Value="SequenceRotation"> </MatTextField>
            <MatTextField Type="number" Label="Dash position of every" Disabled="@(!_includeDash)" PlaceHolder="Sequence Number" @bind-Value="DashNumber"> </MatTextField>  
        </div>
  
           
        <span class="w-50 px-3 pt-2">            <MatSlideToggle  Label='@(_includeDash ? "Include Dash in every 3 letter" : "No Dash")' @bind-Value="@_includeDash"></MatSlideToggle> </span>
            
        <span class="w-50 px-3 pt-2">             
            <MatSlideToggle  Label='@(_isReverse ? "Inverse" : "Basic")' @bind-Value="@_isReverse"></MatSlideToggle></span>
    </MatCardContent>
</MatCard>

    <MatSnackbar class="alert-secondary" @bind-IsOpen="snackBar3IsOpen" Stacked="true">
        <MatSnackbarContent>Dash with inverse is not develop </MatSnackbarContent>
    </MatSnackbar>
@if (result != null)
{
    <MatSnackbar @bind-IsOpen="@snackBar2IsOpen" Stacked="true">
        <MatSnackbarContent>          <h4>Copy Result</h4>     @(string.Join("", result).Trim()) </MatSnackbarContent>
    </MatSnackbar>
    
    <MatCard class="m-5">
        <MatCardContent>      

            <div class="d-flex w-100 flex-row-reverse justify-content-between">
                            <MatIconButton  Icon="@MatIconNames.File_copy" OnClick="CopyTextToClipboard"></MatIconButton>

                <MatHeadline5 class="my-4 mx-4 text-capitalize text-bold">
                    Result
                </MatHeadline5>

            </div>

            <MatBody2 class="text-center w-100">
                @(string.Join("", result).Trim())
            </MatBody2>
        </MatCardContent>
    </MatCard>
    
   
}
<div class="d-flex justify-content-center mt-3">
    <MatButton Outlined="true" Disabled="disablethreeSecond" TrailingIcon="book" OnClick="GenerateResult" Label="Generate Result"> </MatButton>
</div>



 



@code {
    private bool _isReverse = false;
    private bool _includeDash = false;
    private bool disablethreeSecond = false;

    private char[] result;

    private int _sequenceRotation = 7;
    private int SequenceRotation
    {
        get => _sequenceRotation;
        set
        {
            _sequenceRotation = value;
          this.StateHasChanged();  
        } 
    }   
     
    private int _dashNumber = 3;
    private int DashNumber
    {
        get => _dashNumber;
        set
        {
            _dashNumber = value;
          this.StateHasChanged();  
        } 
    }   
    
    private string _charString = "ABCDEFGH";
    private string CharString
    {
        get => _charString;
        set
        {
            _charString = value;
            
          this.StateHasChanged();  
        } 
    }
    
    protected override async Task OnInitializedAsync()
    {
    }

    async Task GenerateResult()
    {
        var model = new SortingAlgorithmModel {CharString = CharString, SequenceOrder = SequenceRotation,DashSequence = DashNumber,IncludeDash = _includeDash , IsInverse = _isReverse};

            result = await _sortingService.GetRotationAlgorithmSequence(model);

        //
        disablethreeSecond = true;
        await Task.Delay(3000);
        disablethreeSecond = false;  

    }
    bool snackBar2IsOpen = false;
    private async Task CopyTextToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", string.Join("", result).Trim());
        snackBar2IsOpen = true;
        this.StateHasChanged();
    }
    bool snackBar3IsOpen = false;

    private async Task InverseWithDash()
    {
    snackBar3IsOpen = true;
        this.StateHasChanged();
    }
 
}


