@page "/personal-loan"
@using InterviewTest.Data
@inject PersonalLoanService LoanService
@using DefaultNamespace

<h3>Personal Loan</h3>
<h6>Basic and advance use case</h6>



<div>
    <MatTextField  Type="number"  Label="Loan Principal Amount ($)" PlaceHolder="Loan Principal ($)" @bind-Value="Principal" ><MatToolTip></MatToolTip> </MatTextField>
    <MatTextField  Type="number" Label="Loan Term in years" PlaceHolder="Loan Term" @bind-Value="LoanTerm"> </MatTextField>
    <MatTextField  Type="number" Label="Monthly Installment ($)" PlaceHolder="Monthly installment ($)" @bind-Value="Installment"> </MatTextField>
    <MatTextField  Label="Rate (%)" PlaceHolder="Rate" @bind-Value="Rate"> </MatTextField>
    
    <div class="d-flex justify-content-center mt-3 gap-4">
        <MatButton Class="p-4" Raised="true" Disabled="@(Principal<= 0 || LoanTerm<=0)" OnClick="CalculateInstallmentAmount"><small>Installment</small></MatButton>  

        <MatButton Class="p-4" Raised="true" Disabled="@(LoanTerm <= 0 || Installment <= 0)" OnClick="CalculatePrincipal"><small>Principal</small></MatButton>
        <MatButton Class="p-4" Raised="true" Secpm Disabled="@(Principal <= 0 || Installment <= 0)" OnClick="CalculatePaymentTerm"><small>Tenure</small> </MatButton>
    </div>

    <div class="d-flex justify-content-center mt-3">
        <MatButton Outlined="true" TrailingIcon="book" OnClick="Reset" Label="Reset"> </MatButton>
    </div>

</div>




@code {
    readonly LoanModel _model = new LoanModel();

    private decimal Principal
    {
        get => _principal;
        set
        {
            _principal = value;
            _model.Principal = value;
            this.StateHasChanged();
        }
    }   
 
    private decimal _principal = 30000;
    private decimal LoanTerm
    {
        get => _loanTerm;
        set
        {
            _loanTerm = value;
            _model.TenureYear = value;

            this.StateHasChanged();
        }
    }
 
    private decimal _loanTerm = 5;
    private decimal Installment
    {
        get => _installment;
        set
        {
            _installment = value;
            _model.Installment = value;
            this.StateHasChanged();
        }
    }
 
    private decimal _installment;
    private decimal Rate
    {
        get => _rate;
        set
        {
            _rate = value * 100;
            _model.Rate = value * 100;
            this.StateHasChanged();
        }
    }
 
    private decimal _rate;

    protected override  void OnInitialized()
    {
        ParseValue();
        
    }

    private delegate Task<LoanModel> SubmitFunction();

    private void  CalculatePrincipal()
    {
        _Submit( async () => await
        LoanService.LoanPrincipalAmount(_model.Installment!.Value, _model.TenureYear!.Value));
    }

    private  void CalculateInstallmentAmount()
    {
        _Submit( async () => 
            await LoanService.LoanPaymentAmount(_model.Principal!.Value, _model.TenureYear!.Value));
    }
    private  void  CalculatePaymentTerm()
    {
        _Submit( async () => 
            await LoanService.LoanPaymentTerm(_model.Installment!.Value, _model.Principal!.Value));
    }



    private async void _Submit(SubmitFunction submitFunction)
    {
        try
        {
            ParseModel(await  submitFunction.Invoke());
        }
        catch (Exception e)
        {
            await Error(e.Message);
        }
    }


    private void ParseValue()
    {
        
        _model.Principal = _principal;
        _model.TenureYear = _loanTerm;
        _model.Rate = _rate;
        _model.Installment = _installment;
    }

    private void ParseModel(LoanModel loanModel)
    {
        Principal = loanModel.Principal!.Value;
        LoanTerm = loanModel.TenureYear!.Value;
        Rate = loanModel.Rate!.Value;
        Installment = loanModel.Installment!.Value;
    }

  
    [Inject]
    IJSRuntime JS { get; set; }
 
    async Task Error(string err) =>
        await JS.InvokeAsync<object>("alert", err);


    private void Reset()
    {
        Principal = 30000;
        LoanTerm = 5;
        Rate = 0;
        Installment = 0;
        }

}
